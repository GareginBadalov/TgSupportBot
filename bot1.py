import importlib

import telebot
from bs4 import BeautifulSoup
from telebot import types
import urllib.request
from urllib.parse import quote
import re
import config
import requests

bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start'])
def welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    mu_button1 = types.KeyboardButton("‚òÅ –ü–æ–≥–æ–¥–∞")
    mu_button2 = types.KeyboardButton("üí≤–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
    mu_button3 = types.KeyboardButton("·êà –í–∏–¥–µ–æ –Ω–∞ Youtube")
    mu_button4 = types.KeyboardButton("üîé –ó–∞–ø—Ä–æ—Å –≤–∏–∫–∏–ø–µ–¥–∏–∏")
    name = bot.get_me().first_name
    markup.add(mu_button1, mu_button2, mu_button3, mu_button4)
    bot.send_message(message.chat.id, f'{message.from_user.first_name}, Welcome to the {name}', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "‚òÅ –ü–æ–≥–æ–¥–∞")
def choise(message):
    markup = types.ReplyKeyboardRemove(selective=False)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ"/–ø–æ–≥–æ–¥–∞", –∞ –∑–∞—Ç–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä:/–ø–æ–≥–æ–¥–∞ –ú–æ—Å–∫–≤–∞',
                     reply_markup=markup)


@bot.message_handler(func=lambda message: '/–ø–æ–≥–æ–¥–∞' in message.text)
def weather(message):
    try:
        city = message.text[8:]
        observation = config.mgr.weather_at_place(city)
        w = observation.weather

        temp = w.temperature('celsius')['temp']
        bot.send_message(message.chat.id, f'–í –≥–æ—Ä–æ–¥–µ {city}, —Å–µ–π—á–∞—Å {str(temp)} –≥—Ä–∞–¥—É—Å–æ–≤')
    except Exception:
        bot.send_message(message.chat.id, f'–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


@bot.message_handler(func=lambda message: message.text == "üí≤–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
def choise1(message):
    markup_in = types.InlineKeyboardMarkup(row_width=3)
    mu_in_button1 = types.InlineKeyboardButton('–î–æ–ª–ª–∞—Ä', callback_data='dlr')
    mu_in_button2 = types.InlineKeyboardButton('–ï–≤—Ä–æ', callback_data='eur')
    mu_in_button3 = types.InlineKeyboardButton('–ì—Ä–∏–≤–Ω–∞', callback_data='grvn')
    markup_in.add(mu_in_button1, mu_in_button2, mu_in_button3)
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=markup_in)


@bot.message_handler(func=lambda message: message.text == "·êà –í–∏–¥–µ–æ –Ω–∞ Youtube")
def choise2(message):
    markup_in2 = types.InlineKeyboardMarkup(row_width=1)
    mu2_in_button1 = types.InlineKeyboardButton('–ò—Å–∫–∞—Ç—å', callback_data='go')
    markup_in2.add(mu2_in_button1)
    bot.send_message(message.chat.id,
                     '–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ. –ù–∞–∂–º–∏—Ç–µ –∏—Å–∫–∞—Ç—å –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: ',
                     reply_markup=markup_in2)


@bot.message_handler(func=lambda message: message.text == "üîé –ó–∞–ø—Ä–æ—Å –≤–∏–∫–∏–ø–µ–¥–∏–∏")
def choise3(message):
    bot.send_message(message.chat.id,
                     '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –ø—Ä—è–º–æ –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–µ–¥ –Ω–∏–º "@wiki". –ù–∞–ø—Ä–∏–º–µ—Ä: @wiki –ú–æ—Ü–∞—Ä—Ç')


@bot.callback_query_handler(func=lambda call: True)
def courses(call):
    try:
        if call.message:
            if call.data == 'grvn':
                full_page = requests.get(config.grvn_rub, headers=config.header)
                soup = BeautifulSoup(full_page.content, 'html.parser')
                convert = soup.findAll('span', {'class': 'DFlfde', 'class': 'SwHCTb', 'data-precision': 2})
                bot.send_message(call.message.chat.id, f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≥—Ä–∏–≤–Ω–∞ —Å—Ç–æ–∏—Ç {convert[0].text} —Ä—É–±.')
            elif call.data == 'dlr':
                full_page1 = requests.get(config.dollar_rub, headers=config.header)
                soup1 = BeautifulSoup(full_page1.content, 'html.parser')
                convert1 = soup1.findAll('span', {'class': 'DFlfde', 'class': 'SwHCTb', 'data-precision': 2})
                bot.send_message(call.message.chat.id, f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ–ª–ª–∞—Ä —Å—Ç–æ–∏—Ç {convert1[0].text} —Ä—É–±.')
            elif call.data == 'eur':
                full_page2 = requests.get(config.euro_rub, headers=config.header)
                soup2 = BeautifulSoup(full_page2.content, 'html.parser')
                convert2 = soup2.findAll('span', {'class': 'DFlfde', 'class': 'SwHCTb', 'data-precision': 2})
                bot.send_message(call.message.chat.id, f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ–≤—Ä–æ —Å—Ç–æ–∏—Ç {convert2[0].text} —Ä—É–±.')
            elif call.data == 'go':
                @bot.message_handler(content_types=['text'])
                def search(message):

                    html = urllib.request.urlopen(f'https://www.youtube.com/results?search_query={quote(message.text)}')
                    video_ids = re.findall(r'watch\?v=(\S{11})', html.read().decode())
                    a = 'https://www.youtube.com/watch?v=' + video_ids[0]
                    bot.send_message(message.chat.id, a)




    except:
        pass


bot.polling(none_stop=True)
